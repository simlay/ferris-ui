(function() {
    var type_impls = Object.fromEntries([["objc2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#467-475\">Source</a><a href=\"#impl-Debug-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#468-474\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","objc2::ffi::objc_ivar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#465\">Source</a><a href=\"#impl-Hash-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#465\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","objc2::ffi::objc_ivar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#312-463\">Source</a><a href=\"#impl-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.name\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#318-320\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.name\" class=\"fn\">name</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Returns the instance variable’s name.</p>\n<p>See <a href=\"https://developer.apple.com/documentation/objectivec/1418922-ivar_getname?language=objc\">Apple’s documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#327-329\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.offset\" class=\"fn\">offset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a></h4></section></summary><div class=\"docblock\"><p>Returns the instance variable’s offset from the object base.</p>\n<p>See <a href=\"https://developer.apple.com/documentation/objectivec/1418976-ivar_getoffset?language=objc\">Apple’s documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_encoding\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#336-338\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.type_encoding\" class=\"fn\">type_encoding</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ffi/c_str/struct.CStr.html\" title=\"struct core::ffi::c_str::CStr\">CStr</a></h4></section></summary><div class=\"docblock\"><p>Returns the instance variable’s <code>@encode(type)</code> string.</p>\n<p>See <a href=\"https://developer.apple.com/documentation/objectivec/1418569-ivar_gettypeencoding?language=objc\">Apple’s documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#392-401\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.load_ptr\" class=\"fn\">load_ptr</a>&lt;T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(&amp;self, obj: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a pointer to the instance variable / ivar on the given object.</p>\n<p>This is similar to <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.UnsafeCell.html#method.get\" title=\"method core::cell::UnsafeCell::get\"><code>UnsafeCell::get</code></a>, see that for more information\non what is and isn’t safe to do.</p>\n<p>Usually you will have defined the instance variable yourself with\n<a href=\"objc2/runtime/struct.ClassBuilder.html#method.add_ivar\" title=\"method objc2::runtime::ClassBuilder::add_ivar\"><code>ClassBuilder::add_ivar</code></a>, the type of the ivar <code>T</code> must match the\ntype used in that.</p>\n<p>Library implementors are strongly encouraged to expose a safe\ninterface to the ivar.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics when <code>debug_assertions</code> are enabled if the type encoding of the\nivar differs from the type encoding of <code>T</code>. This can be disabled with\nthe <code>\"disable-encoding-assertions\"</code> Cargo feature flag.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The object must have the given instance variable on it, and it must be\nof type <code>T</code>. Any invariants that the object have assumed about the\nvalue of the instance variable must not be violated.</p>\n<p>Note that an object can have multiple instance variables with the same\nname; you must ensure that when the instance variable was retrieved,\nwas retrieved from the class that it was defined on. In particular,\ngetting a class dynamically using e.g. <a href=\"objc2/runtime/struct.AnyObject.html#method.class\" title=\"method objc2::runtime::AnyObject::class\"><code>AnyObject::class</code></a>, and using\nan instance variable from that here is <em>not</em> sound in general.</p>\n<p>No thread synchronization is done on accesses to the variable, so you\nmust ensure that any access to the returned pointer do not cause data\nraces, and that Rust’s mutability rules are not otherwise violated.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#425-429\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.load\" class=\"fn\">load</a>&lt;'obj, T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(&amp;self, obj: &amp;'obj <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'obj T</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the instance variable with the given name.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for more information.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics when <code>debug_assertions</code> are enabled if the type encoding of the\nivar differs from the type encoding of <code>T</code>. This can be disabled with\nthe <code>\"disable-encoding-assertions\"</code> Cargo feature flag.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The object must have the given instance variable on it, and it must be\nof type <code>T</code>.</p>\n<p>No thread synchronization is done, so you must ensure that no other\nthread is concurrently mutating the variable. This requirement can be\nconsidered upheld if all mutation happens through <a href=\"objc2/runtime/struct.Ivar.html#method.load_mut\" title=\"method objc2::runtime::Ivar::load_mut\"><code>Ivar::load_mut</code></a>\n(since that takes the object mutably).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#452-462\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.Ivar.html#tymethod.load_mut\" class=\"fn\">load_mut</a>&lt;'obj, T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(\n    &amp;self,\n    obj: &amp;'obj mut <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'obj mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the ivar with the given name.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for more information.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics when <code>debug_assertions</code> are enabled if the type encoding of the\nivar differs from the type encoding of <code>T</code>. This can be disabled with\nthe <code>\"disable-encoding-assertions\"</code> Cargo feature flag.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The object must have an instance variable with the given name, and it\nmust be of type <code>T</code>.</p>\n<p>This access happens through <code>&amp;mut</code>, which means we know it to be the\nonly reference, hence you do not need to do any work to ensure that\ndata races do not happen.</p>\n</div></details></div></details>",0,"objc2::ffi::objc_ivar"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#465\">Source</a><a href=\"#impl-PartialEq-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#465\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","objc2::ffi::objc_ivar"],["<section id=\"impl-Eq-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#465\">Source</a><a href=\"#impl-Eq-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section>","Eq","objc2::ffi::objc_ivar"],["<section id=\"impl-RefUnwindSafe-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#310\">Source</a><a href=\"#impl-RefUnwindSafe-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section>","RefUnwindSafe","objc2::ffi::objc_ivar"],["<section id=\"impl-Send-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#308\">Source</a><a href=\"#impl-Send-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section>","Send","objc2::ffi::objc_ivar"],["<section id=\"impl-Sync-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#307\">Source</a><a href=\"#impl-Sync-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section>","Sync","objc2::ffi::objc_ivar"],["<section id=\"impl-UnwindSafe-for-Ivar\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#309\">Source</a><a href=\"#impl-UnwindSafe-for-Ivar\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"objc2/runtime/struct.Ivar.html\" title=\"struct objc2::runtime::Ivar\">Ivar</a></h3></section>","UnwindSafe","objc2::ffi::objc_ivar"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[18488]}