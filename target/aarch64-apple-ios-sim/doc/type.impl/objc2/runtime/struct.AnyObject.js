(function() {
    var type_impls = Object.fromEntries([["objc2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1235-1504\">Source</a><a href=\"#impl-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.class\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1258-1269\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.class\" class=\"fn\">class</a>(&amp;self) -&gt; &amp;'static <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a></h4></section></summary><div class=\"docblock\"><p>Dynamically find the class of this object.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>May panic if the object is invalid (which may be the case for objects\nreturned from unavailable <code>init</code>/<code>new</code> methods).</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Check that an instance of <code>NSObject</code> has the precise class <code>NSObject</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2::ClassType;\n<span class=\"kw\">use </span>objc2::runtime::NSObject;\n\n<span class=\"kw\">let </span>obj = NSObject::new();\n<span class=\"macro\">assert_eq!</span>(obj.class(), NSObject::class());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_class\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1298-1311\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.set_class\" class=\"fn\">set_class</a>&lt;'s&gt;(this: &amp;Self, cls: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a>) -&gt; &amp;'s <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a></h4></section></summary><div class=\"docblock\"><p>Change the class of the object at runtime.</p>\n<p>Returns the object’s previous class.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The new class must:</p>\n<ol>\n<li>\n<p>Be a subclass of the object’s current class.</p>\n</li>\n<li>\n<p>The subclass must not add any instance variables - importantly, the\ninstance size of old and the new classes must be the same.</p>\n</li>\n<li>\n<p>Any overridden methods on the new class must be fully compatible\nwith the old ones.</p>\n</li>\n</ol>\n<p>Note that in the general case, where arbitrary parts of the program\nmay be trying to modify the class of the object concurrently, these\nrequirements are not actually possible to uphold.</p>\n<p>Since usage of this function is expected to be extremely rare, and\neven more so trying to do it concurrently, it is recommended that you\nverify that the returned class is what you would expect, and if not,\npanic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ivar\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1350-1354\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.get_ivar\" class=\"fn\">get_ivar</a>&lt;T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: this is difficult to use correctly, use <code>Ivar::load</code> instead.</span></div></span></summary><div class=\"docblock\"><p>Use <a href=\"objc2/runtime/struct.Ivar.html#method.load\" title=\"method objc2::runtime::Ivar::load\"><code>Ivar::load</code></a> instead.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The object must have an instance variable with the given name, and it\nmust be of type <code>T</code>.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for details surrounding this.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_ivar\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1366-1370\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.get_mut_ivar\" class=\"fn\">get_mut_ivar</a>&lt;T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>&gt;(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: this is difficult to use correctly, use <code>Ivar::load_mut</code> instead.</span></div></span></summary><div class=\"docblock\"><p>Use <a href=\"objc2/runtime/struct.Ivar.html#method.load_mut\" title=\"method objc2::runtime::Ivar::load_mut\"><code>Ivar::load_mut</code></a> instead.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The object must have an instance variable with the given name, and it\nmust be of type <code>T</code>.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for details surrounding this.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1489-1499\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T: <a class=\"trait\" href=\"objc2/trait.DowncastTarget.html\" title=\"trait objc2::DowncastTarget\">DowncastTarget</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the object to a class of type <code>T</code>.</p>\n<p>This is the reference-variant. Use <a href=\"objc2/rc/struct.Retained.html#method.downcast\" title=\"method objc2::rc::Retained::downcast\"><code>Retained::downcast</code></a> if you want\nto convert a retained object to another type.</p>\n<h5 id=\"mutable-classes\"><a class=\"doc-anchor\" href=\"#mutable-classes\">§</a>Mutable classes</h5>\n<p>Some classes have immutable and mutable variants, such as <code>NSString</code>\nand <code>NSMutableString</code>.</p>\n<p>When some Objective-C API signature says it gives you an immutable\nclass, it generally expects you to not mutate that, even though it may\ntechnically be mutable “under the hood”.</p>\n<p>So using this method to convert a <code>NSString</code> to a <code>NSMutableString</code>,\nwhile not unsound, is generally frowned upon unless you created the\nstring yourself, or the API explicitly documents the string to be\nmutable.</p>\n<p>See Apple’s <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/CocoaEncyclopedia/ObjectMutability/ObjectMutability.html\">documentation on mutability</a> and <a href=\"https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418511-iskindofclass?language=objc\">on\n<code>isKindOfClass:</code></a> for more details.</p>\n<h5 id=\"generic-classes\"><a class=\"doc-anchor\" href=\"#generic-classes\">§</a>Generic classes</h5>\n<p>Objective-C generics are called “lightweight generics”, and that’s\nbecause they aren’t exposed in the runtime. This makes it impossible\nto safely downcast to generic collections, so this is disallowed by\nthis method.</p>\n<p>You can, however, safely downcast to generic collections where all the\ntype-parameters are <a href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\"><code>AnyObject</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This works internally by calling <code>isKindOfClass:</code>. That means that the\nobject must have the instance method of that name, and an exception\nwill be thrown (if CoreFoundation is linked) or the process will abort\nif that is not the case. In the vast majority of cases, you don’t need\nto worry about this, since both root objects <a href=\"objc2/runtime/struct.NSObject.html\" title=\"struct objc2::runtime::NSObject\"><code>NSObject</code></a> and\n<code>NSProxy</code> implement this method.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Cast an <code>NSString</code> back and forth from <code>NSObject</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2::rc::Retained;\n<span class=\"kw\">use </span>objc2_foundation::{NSObject, NSString};\n\n<span class=\"kw\">let </span>obj: Retained&lt;NSObject&gt; = NSString::new().into_super();\n<span class=\"kw\">let </span>string = obj.downcast_ref::&lt;NSString&gt;().unwrap();\n<span class=\"comment\">// Or with `downcast`, if we do not need the object afterwards\n</span><span class=\"kw\">let </span>string = obj.downcast::&lt;NSString&gt;().unwrap();</code></pre></div>\n<p>Try (and fail) to cast an <code>NSObject</code> to an <code>NSString</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSObject, NSString};\n\n<span class=\"kw\">let </span>obj = NSObject::new();\n<span class=\"macro\">assert!</span>(obj.downcast_ref::&lt;NSString&gt;().is_none());</code></pre></div>\n<p>Try to cast to an array of strings.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSArray, NSObject, NSString};\n\n<span class=\"kw\">let </span>arr = NSArray::from_retained_slice(<span class=\"kw-2\">&amp;</span>[NSObject::new()]);\n<span class=\"comment\">// This is invalid and doesn't type check.\n</span><span class=\"kw\">let </span>arr = arr.downcast_ref::&lt;NSArray&lt;NSString&gt;&gt;();</code></pre></div>\n<p>This fails to compile, since it would require enumerating over the\narray to ensure that each element is of the desired type, which is a\nperformance pitfall.</p>\n<p>Downcast when processing each element instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSArray, NSObject, NSString};\n\n<span class=\"kw\">let </span>arr = NSArray::from_retained_slice(<span class=\"kw-2\">&amp;</span>[NSObject::new()]);\n\n<span class=\"kw\">for </span>elem <span class=\"kw\">in </span>arr {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(data) = elem.downcast_ref::&lt;NSString&gt;() {\n        <span class=\"comment\">// handle `data`\n    </span>}\n}</code></pre></div></div></details></div></details>",0,"objc2::ffi::objc_object","objc2::runtime::Object"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1506-1511\">Source</a><a href=\"#impl-Debug-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1507-1510\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","objc2::ffi::objc_object","objc2::runtime::Object"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Message-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1233\">Source</a><a href=\"#impl-Message-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"objc2/trait.Message.html\" title=\"trait objc2::Message\">Message</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/top_level_traits.rs.html#105-119\">Source</a><a href=\"#method.retain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"objc2/trait.Message.html#method.retain\" class=\"fn\">retain</a>(&amp;self) -&gt; <a class=\"struct\" href=\"objc2/rc/struct.Retained.html\" title=\"struct objc2::rc::Retained\">Retained</a>&lt;Self&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Retained&lt;Self&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Increment the reference count of the receiver. <a href=\"objc2/trait.Message.html#method.retain\">Read more</a></div></details></div></details>","Message","objc2::ffi::objc_object","objc2::runtime::Object"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefEncode-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1222-1224\">Source</a><a href=\"#impl-RefEncode-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"objc2/encode/trait.RefEncode.html\" title=\"trait objc2::encode::RefEncode\">RefEncode</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ENCODING_REF\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1223\">Source</a><a href=\"#associatedconstant.ENCODING_REF\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\" class=\"constant\">ENCODING_REF</a>: <a class=\"enum\" href=\"objc2/encode/enum.Encoding.html\" title=\"enum objc2::encode::Encoding\">Encoding</a> = Encoding::Object</h4></section></summary><div class='docblock'>The Objective-C type-encoding for a reference of this type. <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\">Read more</a></div></details></div></details>","RefEncode","objc2::ffi::objc_object","objc2::runtime::Object"]]],["objc2_ui_kit",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1235\">Source</a><a href=\"#impl-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.class\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1258\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.class\" class=\"fn\">class</a>(&amp;self) -&gt; &amp;'static <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a></h4></section></summary><div class=\"docblock\"><p>Dynamically find the class of this object.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>May panic if the object is invalid (which may be the case for objects\nreturned from unavailable <code>init</code>/<code>new</code> methods).</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<p>Check that an instance of <code>NSObject</code> has the precise class <code>NSObject</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2::ClassType;\n<span class=\"kw\">use </span>objc2::runtime::NSObject;\n\n<span class=\"kw\">let </span>obj = NSObject::new();\n<span class=\"macro\">assert_eq!</span>(obj.class(), NSObject::class());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_class\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1298\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.set_class\" class=\"fn\">set_class</a>&lt;'s&gt;(this: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a>, cls: &amp;<a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a>) -&gt; &amp;'s <a class=\"struct\" href=\"objc2/runtime/struct.AnyClass.html\" title=\"struct objc2::runtime::AnyClass\">AnyClass</a></h4></section></summary><div class=\"docblock\"><p>Change the class of the object at runtime.</p>\n<p>Returns the object’s previous class.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The new class must:</p>\n<ol>\n<li>\n<p>Be a subclass of the object’s current class.</p>\n</li>\n<li>\n<p>The subclass must not add any instance variables - importantly, the\ninstance size of old and the new classes must be the same.</p>\n</li>\n<li>\n<p>Any overridden methods on the new class must be fully compatible\nwith the old ones.</p>\n</li>\n</ol>\n<p>Note that in the general case, where arbitrary parts of the program\nmay be trying to modify the class of the object concurrently, these\nrequirements are not actually possible to uphold.</p>\n<p>Since usage of this function is expected to be extremely rare, and\neven more so trying to do it concurrently, it is recommended that you\nverify that the returned class is what you would expect, and if not,\npanic.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ivar\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1350\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.get_ivar\" class=\"fn\">get_ivar</a>&lt;T&gt;(&amp;self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: this is difficult to use correctly, use <code>Ivar::load</code> instead.</span></div></span></summary><div class=\"docblock\"><p>Use <a href=\"objc2/runtime/struct.Ivar.html#method.load\" title=\"method objc2::runtime::Ivar::load\"><code>Ivar::load</code></a> instead.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>The object must have an instance variable with the given name, and it\nmust be of type <code>T</code>.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for details surrounding this.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut_ivar\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1366\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.get_mut_ivar\" class=\"fn\">get_mut_ivar</a>&lt;T&gt;(&amp;mut self, name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a><div class=\"where\">where\n    T: <a class=\"trait\" href=\"objc2/encode/trait.Encode.html\" title=\"trait objc2::encode::Encode\">Encode</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: this is difficult to use correctly, use <code>Ivar::load_mut</code> instead.</span></div></span></summary><div class=\"docblock\"><p>Use <a href=\"objc2/runtime/struct.Ivar.html#method.load_mut\" title=\"method objc2::runtime::Ivar::load_mut\"><code>Ivar::load_mut</code></a> instead.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>The object must have an instance variable with the given name, and it\nmust be of type <code>T</code>.</p>\n<p>See <a href=\"objc2/runtime/struct.Ivar.html#method.load_ptr\" title=\"method objc2::runtime::Ivar::load_ptr\"><code>Ivar::load_ptr</code></a> for details surrounding this.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1489\">Source</a><h4 class=\"code-header\">pub fn <a href=\"objc2/runtime/struct.AnyObject.html#tymethod.downcast_ref\" class=\"fn\">downcast_ref</a>&lt;T&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"objc2/downcast/trait.DowncastTarget.html\" title=\"trait objc2::downcast::DowncastTarget\">DowncastTarget</a>,</div></h4></section></summary><div class=\"docblock\"><p>Attempt to downcast the object to a class of type <code>T</code>.</p>\n<p>This is the reference-variant. Use <a href=\"objc2/rc/retained/struct.Retained.html#method.downcast\" title=\"method objc2::rc::retained::Retained::downcast\"><code>Retained::downcast</code></a> if you want\nto convert a retained object to another type.</p>\n<h5 id=\"mutable-classes\"><a class=\"doc-anchor\" href=\"#mutable-classes\">§</a>Mutable classes</h5>\n<p>Some classes have immutable and mutable variants, such as <code>NSString</code>\nand <code>NSMutableString</code>.</p>\n<p>When some Objective-C API signature says it gives you an immutable\nclass, it generally expects you to not mutate that, even though it may\ntechnically be mutable “under the hood”.</p>\n<p>So using this method to convert a <code>NSString</code> to a <code>NSMutableString</code>,\nwhile not unsound, is generally frowned upon unless you created the\nstring yourself, or the API explicitly documents the string to be\nmutable.</p>\n<p>See Apple’s <a href=\"https://developer.apple.com/library/archive/documentation/General/Conceptual/CocoaEncyclopedia/ObjectMutability/ObjectMutability.html\">documentation on mutability</a> and <a href=\"https://developer.apple.com/documentation/objectivec/1418956-nsobject/1418511-iskindofclass?language=objc\">on\n<code>isKindOfClass:</code></a> for more details.</p>\n<h5 id=\"generic-classes\"><a class=\"doc-anchor\" href=\"#generic-classes\">§</a>Generic classes</h5>\n<p>Objective-C generics are called “lightweight generics”, and that’s\nbecause they aren’t exposed in the runtime. This makes it impossible\nto safely downcast to generic collections, so this is disallowed by\nthis method.</p>\n<p>You can, however, safely downcast to generic collections where all the\ntype-parameters are <a href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\"><code>AnyObject</code></a>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>This works internally by calling <code>isKindOfClass:</code>. That means that the\nobject must have the instance method of that name, and an exception\nwill be thrown (if CoreFoundation is linked) or the process will abort\nif that is not the case. In the vast majority of cases, you don’t need\nto worry about this, since both root objects <a href=\"objc2/runtime/nsobject/struct.NSObject.html\" title=\"struct objc2::runtime::nsobject::NSObject\"><code>NSObject</code></a> and\n<code>NSProxy</code> implement this method.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Cast an <code>NSString</code> back and forth from <code>NSObject</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2::rc::Retained;\n<span class=\"kw\">use </span>objc2_foundation::{NSObject, NSString};\n\n<span class=\"kw\">let </span>obj: Retained&lt;NSObject&gt; = NSString::new().into_super();\n<span class=\"kw\">let </span>string = obj.downcast_ref::&lt;NSString&gt;().unwrap();\n<span class=\"comment\">// Or with `downcast`, if we do not need the object afterwards\n</span><span class=\"kw\">let </span>string = obj.downcast::&lt;NSString&gt;().unwrap();</code></pre></div>\n<p>Try (and fail) to cast an <code>NSObject</code> to an <code>NSString</code>.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSObject, NSString};\n\n<span class=\"kw\">let </span>obj = NSObject::new();\n<span class=\"macro\">assert!</span>(obj.downcast_ref::&lt;NSString&gt;().is_none());</code></pre></div>\n<p>Try to cast to an array of strings.</p>\n\n<div class=\"example-wrap compile_fail\"><a href=\"#\" class=\"tooltip\" title=\"This example deliberately fails to compile\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSArray, NSObject, NSString};\n\n<span class=\"kw\">let </span>arr = NSArray::from_retained_slice(<span class=\"kw-2\">&amp;</span>[NSObject::new()]);\n<span class=\"comment\">// This is invalid and doesn't type check.\n</span><span class=\"kw\">let </span>arr = arr.downcast_ref::&lt;NSArray&lt;NSString&gt;&gt;();</code></pre></div>\n<p>This fails to compile, since it would require enumerating over the\narray to ensure that each element is of the desired type, which is a\nperformance pitfall.</p>\n<p>Downcast when processing each element instead.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>objc2_foundation::{NSArray, NSObject, NSString};\n\n<span class=\"kw\">let </span>arr = NSArray::from_retained_slice(<span class=\"kw-2\">&amp;</span>[NSObject::new()]);\n\n<span class=\"kw\">for </span>elem <span class=\"kw\">in </span>arr {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(data) = elem.downcast_ref::&lt;NSString&gt;() {\n        <span class=\"comment\">// handle `data`\n    </span>}\n}</code></pre></div></div></details></div></details>",0,"objc2_ui_kit::generated::__UIIndirectScribbleInteraction::UIScribbleElementIdentifier","objc2_ui_kit::generated::__UITextSearching::UITextSearchDocumentIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1506\">Source</a><a href=\"#impl-Debug-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1507\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","objc2_ui_kit::generated::__UIIndirectScribbleInteraction::UIScribbleElementIdentifier","objc2_ui_kit::generated::__UITextSearching::UITextSearchDocumentIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Message-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1233\">Source</a><a href=\"#impl-Message-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"objc2/top_level_traits/trait.Message.html\" title=\"trait objc2::top_level_traits::Message\">Message</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/objc2/top_level_traits.rs.html#105-107\">Source</a><a href=\"#method.retain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"objc2/top_level_traits/trait.Message.html#method.retain\" class=\"fn\">retain</a>(&amp;self) -&gt; <a class=\"struct\" href=\"objc2/rc/retained/struct.Retained.html\" title=\"struct objc2::rc::retained::Retained\">Retained</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Increment the reference count of the receiver. <a href=\"objc2/top_level_traits/trait.Message.html#method.retain\">Read more</a></div></details></div></details>","Message","objc2_ui_kit::generated::__UIIndirectScribbleInteraction::UIScribbleElementIdentifier","objc2_ui_kit::generated::__UITextSearching::UITextSearchDocumentIdentifier"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefEncode-for-AnyObject\" class=\"impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1222\">Source</a><a href=\"#impl-RefEncode-for-AnyObject\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"objc2/encode/trait.RefEncode.html\" title=\"trait objc2::encode::RefEncode\">RefEncode</a> for <a class=\"struct\" href=\"objc2/runtime/struct.AnyObject.html\" title=\"struct objc2::runtime::AnyObject\">AnyObject</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ENCODING_REF\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/objc2/runtime/mod.rs.html#1223\">Source</a><a href=\"#associatedconstant.ENCODING_REF\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\" class=\"constant\">ENCODING_REF</a>: <a class=\"enum\" href=\"objc2_encode/encoding/enum.Encoding.html\" title=\"enum objc2_encode::encoding::Encoding\">Encoding</a> = Encoding::Object</h4></section></summary><div class='docblock'>The Objective-C type-encoding for a reference of this type. <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\">Read more</a></div></details></div></details>","RefEncode","objc2_ui_kit::generated::__UIIndirectScribbleInteraction::UIScribbleElementIdentifier","objc2_ui_kit::generated::__UITextSearching::UITextSearchDocumentIdentifier"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16867,17850]}