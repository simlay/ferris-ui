(function() {
    var type_impls = Object.fromEntries([["block2",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Block%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#69-118\">Source</a><a href=\"#impl-Block%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"struct\" href=\"block2/struct.Block.html\" title=\"struct block2::Block\">Block</a>&lt;F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy\" class=\"method\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#90-97\">Source</a><h4 class=\"code-header\">pub fn <a href=\"block2/struct.Block.html#tymethod.copy\" class=\"fn\">copy</a>(&amp;self) -&gt; <a class=\"struct\" href=\"block2/struct.RcBlock.html\" title=\"struct block2::RcBlock\">RcBlock</a>&lt;F&gt;</h4></section></summary><div class=\"docblock\"><p>Copy the block onto the heap as an <a href=\"block2/struct.RcBlock.html\" title=\"struct block2::RcBlock\"><code>RcBlock</code></a>.</p>\n<p>The behaviour of this function depends on whether the block is from a\n<a href=\"block2/struct.RcBlock.html\" title=\"struct block2::RcBlock\"><code>RcBlock</code></a> or a <a href=\"block2/struct.StackBlock.html\" title=\"struct block2::StackBlock\"><code>StackBlock</code></a>. In the former case, it will bump the\nreference-count (just as-if you’d <code>Clone</code>’d the <code>RcBlock</code>), in the\nlatter case it will construct a new <code>RcBlock</code> from the <code>StackBlock</code>.</p>\n<p>This distinction should not matter, except for micro-optimizations.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.call\" class=\"method\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#104-117\">Source</a><h4 class=\"code-header\">pub fn <a href=\"block2/struct.Block.html#tymethod.call\" class=\"fn\">call</a>(&amp;self, args: F::<a class=\"associatedtype\" href=\"block2/trait.BlockFn.html#associatedtype.Args\" title=\"type block2::BlockFn::Args\">Args</a>) -&gt; F::<a class=\"associatedtype\" href=\"block2/trait.BlockFn.html#associatedtype.Output\" title=\"type block2::BlockFn::Output\">Output</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"block2/trait.BlockFn.html\" title=\"trait block2::BlockFn\">BlockFn</a>,</div></h4></section></summary><div class=\"docblock\"><p>Call the block.</p>\n<p>The arguments must be passed as a tuple. The return is the output of\nthe block.</p>\n</div></details></div></details>",0,"block2::DynBlock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Block%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#120-126\">Source</a><a href=\"#impl-Debug-for-Block%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"block2/struct.Block.html\" title=\"struct block2::Block\">Block</a>&lt;F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#121-125\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","block2::DynBlock"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefEncode-for-Block%3CF%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#65-67\">Source</a><a href=\"#impl-RefEncode-for-Block%3CF%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"block2/trait.BlockFn.html\" title=\"trait block2::BlockFn\">BlockFn</a>&gt; <a class=\"trait\" href=\"objc2/encode/trait.RefEncode.html\" title=\"trait objc2::encode::RefEncode\">RefEncode</a> for <a class=\"struct\" href=\"block2/struct.Block.html\" title=\"struct block2::Block\">Block</a>&lt;F&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ENCODING_REF\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/block2/block.rs.html#66\">Source</a><a href=\"#associatedconstant.ENCODING_REF\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\" class=\"constant\">ENCODING_REF</a>: <a class=\"enum\" href=\"objc2_encode/encoding/enum.Encoding.html\" title=\"enum objc2_encode::encoding::Encoding\">Encoding</a> = Encoding::Block</h4></section></summary><div class='docblock'>The Objective-C type-encoding for a reference of this type. <a href=\"objc2/encode/trait.RefEncode.html#associatedconstant.ENCODING_REF\">Read more</a></div></details></div></details>","RefEncode","block2::DynBlock"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[6044]}